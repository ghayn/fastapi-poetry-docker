ARG PYTHON_VERSION=3.11-debian-11

FROM bitnami/python:$PYTHON_VERSION

LABEL author="ghayn"
LABEL email="ghayn@outlook.com"

RUN apt-get update -qq \
    && DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends \
        build-essential \
        gnupg2 \
        && apt-get clean \
        && rm -rf /var/cache/apt/archives/* \
        && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
        &&  truncate -s 0 /var/log/*log

# Install PostgreSQL dependencies
ARG PG_MAJOR
ARG DISTRO_NAME=bullseye
RUN curl -sSL https://www.postgresql.org/media/keys/ACCC4CF8.asc | \
    gpg --dearmor -o /usr/share/keyrings/postgres-archive-keyring.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/postgres-archive-keyring.gpg] https://apt.postgresql.org/pub/repos/apt/" \
    ${DISTRO_NAME}-pgdg main $PG_MAJOR | tee /etc/apt/sources.list.d/postgres.list > /dev/null
RUN apt-get update -qq && DEBIAN_FRONTEND=noninteractive apt-get -yq dist-upgrade && \
  DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends \
    libpq-dev \
    postgresql-client-$PG_MAJOR \
    && apt-get clean \
    && rm -rf /var/cache/apt/archives/* \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
    && truncate -s 0 /var/log/*log

# Application dependencies
# We use an external aptfile for this, stay tuned
COPY aptfile /tmp/aptfile
RUN apt-get update -qq && DEBIAN_FRONTEND=noninteractive apt-get -yq dist-upgrade && \
  DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends \
    $(grep -Ev '^\s*#' /tmp/aptfile | xargs) \
    && apt-get clean \
    && rm -rf /var/cache/apt/archives/* \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
    && truncate -s 0 /var/log/*log

ENV LANG=C.UTF-8

ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100 \
    POETRY_HOME="/opt/poetry" \
    POETRY_NO_INTERACTION=1

RUN curl -sSL https://install.python-poetry.org | python -

ENV POETRY_CACHE_DIR="$POETRY_HOME/cache" \
    PATH="$POETRY_HOME/bin:$PATH"

RUN mkdir -p "$POETRY_CACHE_DIR"

RUN mkdir -p /src
WORKDIR /src

ENTRYPOINT .docker/dev/setup-venv-entrypoint.sh $0 $@

CMD ["/bin/bash"]
