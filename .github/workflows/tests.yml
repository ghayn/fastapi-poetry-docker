name: "tests"

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.sha }}
  cancel-in-progress: true

jobs:
  tests:
    strategy:
      matrix:
        os: [Ubuntu]
        python-version: ["3.10", "3.11"]
        include:
          - os: Ubuntu
            image: ubuntu-22.04
      fail-fast: false

    name: ${{ matrix.os }} / ${{ matrix.python-version }}

    runs-on: ${{ matrix.image }}

    env:
      APP_ENV: test
      APP_DATABASE_URL: "postgres://postgres:password@localhost:5432/fastapi_test"

    # services:
    #   postgres:
    #     image: postgres:15-alpine
    #     ports:
    #       - "5432:5432"
    #     env:
    #       POSTGRES_DB: fastapi_test
    #       POSTGRES_USER: postgres
    #       POSTGRES_PASSWORD: password

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get full Python version
        id: full-python-version
        run: echo version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))") >> $GITHUB_OUTPUT

      - name: Bootstrap poetry
        run: |
          curl -sSL https://install.python-poetry.org | python - -y

      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: |
          # `timeout` is not available on macOS, so we define a custom function.
          [ "$(command -v timeout)" ] || function timeout() { perl -e 'alarm shift; exec @ARGV' "$@"; }

          # Using `timeout` is a safeguard against the Poetry command hanging for some reason.
          timeout 10s poetry run pip --version || rm -rf .venv

      - name: Check lock file
        run: poetry lock --check

      - name: Install dependencies
        run: poetry install

      - name: Run pytest
        run: poetry run pytest
